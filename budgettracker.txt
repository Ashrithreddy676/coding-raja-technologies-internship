import os

class Transaction:
    def __init__(self, category, amount, is_expense):
        self.category = category
        self.amount = amount
        self.is_expense = is_expense

    def __str__(self):
        return f"{self.category} ({self.amount}, {'Expense' if self.is_expense else 'Income'})"

class BudgetTracker:
    def __init__(self, filename):
        self.filename = filename
        self.transactions = []

        # Load the budget tracker from the file
        with open(self.filename, "r") as f:
            for line in f:
                category, amount, is_expense = line.split(",")
                self.transactions.append(Transaction(category, float(amount), is_expense == "True"))

    def save(self):
        # Save the budget tracker to the file
        with open(self.filename, "w") as f:
            for transaction in self.transactions:
                f.write(f"{transaction.category},{transaction.amount},{transaction.is_expense}\n")

    def add_transaction(self, category, amount, is_expense):
        # Add a new transaction to the budget tracker
        self.transactions.append(Transaction(category, amount, is_expense))

    def remove_transaction(self, transaction_id):
        # Remove a transaction from the budget tracker by its ID
        self.transactions.pop(transaction_id)

    def calculate_remaining_budget(self):
        # Calculate the remaining budget after deducting expenses from income
        total_income = 0
        total_expenses = 0

        for transaction in self.transactions:
            if transaction.is_expense:
                total_expenses += transaction.amount
            else:
                total_income += transaction.amount

        return total_income - total_expenses

    def analyze_expenses(self):
        # Analyze expenses by categorizing them and displaying spending trends
        expense_categories = {}

        for transaction in self.transactions:
            if transaction.is_expense:
                category = transaction.category
                amount = transaction.amount

                if category not in expense_categories:
                    expense_categories[category] = 0

                expense_categories[category] += amount

        return expense_categories

def main():
    # Create a new budget tracker object
    budget_tracker = BudgetTracker("budget_tracker.txt")

    # Display the main menu
    print("Console-based budget tracker")
    print("----------------------------------")
    print("1. Add a new transaction")
    print("2. Remove a transaction")
    print("3. Calculate remaining budget")
    print("4. Analyze expenses")
    print("5. Exit")

    # Get user input
    choice = input("Enter your choice: ")

    # Perform the selected action
    if choice == "1":
        category = input("Enter the category: ")
        amount = float(input("Enter the amount: "))
        is_expense = input("Is this an expense (Y/N)? ").lower() == "y"

        budget_tracker.add_transaction(category, amount, is_expense)
        budget_tracker.save()

        print("Transaction added successfully!")

    elif choice == "2":
        transaction_id = int(input("Enter the ID of the transaction to remove: "))

        budget_tracker.remove_transaction(transaction_id)
        budget_tracker.save()

        print("Transaction removed successfully!")

    elif choice == "3":
        remaining_budget = budget_tracker.calculate_remaining_budget()
        print(f"Remaining budget: {remaining_budget}")

    elif choice == "4":
        expense_categories = budget_tracker.analyze_expenses()

        print("Expense categories:")
        for category, amount in expense_categories.items():
            print(f"- {category}: {amount}")

    elif choice == "5":
        exit()

    else:
        print("Invalid choice!")

if __name__ == "__main__":
    main()
